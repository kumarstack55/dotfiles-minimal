" vim:set ft=vim sw=2 ts=2 et:
scriptencoding utf-8

call plug#begin()

  " vim-cheatsheet opens your cheat sheet file.
  Plug 'reireias/vim-cheatsheet', { 'on': 'Cheat' }

  " Iceberg is well-designed, bluish color scheme for Vim and Neovim.
  Plug 'cocopon/iceberg.vim'

  if getenv('DOTFILES_VIM_NERDTREE') == 'y'
    " The NERDTree is a file system explorer for the Vim editor.
    Plug 'preservim/nerdtree', {'on': 'NERDTreeToggle'}
  endif

  if getenv('DOTFILES_VIM_BUFEXPLORER') == 'y'
    " BufExplorer Plugin for Vim
    Plug 'jlanzarotta/bufexplorer'
  endif

  " Tagbar is a Vim plugin that provides an easy way to browse the tags of the
  " current file and get an overview of its structure.
  Plug 'preservim/tagbar', {
    \ 'for': [
      \ 'bats',
      \ 'c',
      \ 'c++',
      \ 'go',
      \ 'markdown',
      \ 'ps1',
      \ 'python',
      \ 'rst',
      \ 'rust',
      \ 'sh',
      \ 'snippets',
      \ 'vim',
    \ ]
  \ }

  if getenv('DOTFILES_VIM_GITGUTTER') == 'y'
    " A Vim plugin which shows a git diff in the sign column.
    Plug 'airblade/vim-gitgutter'
  endif

  if (v:version >= 900 && has('patch0185')) || has('nvim-0.7')
    if getenv('DOTFILES_VIM_GITHUB_COPILOT') == 'y'
      " Copilot.vim is a Vim/Neovim plugin for GitHub Copilot.
      Plug 'github/copilot.vim'
    endif
  endif

  if has('nvim')
    if has('nvim-0.9')
      " https://neovim.io/doc/user/editorconfig.html
      " > EditorConfig is enabled by default.
      let g:my_addons_editorconfig_type = "nvim-default"
    else
      let g:my_addons_editorconfig_type = "vim-plug"
    endif
  else
    if v:version < 900 || (v:version == 900 && has('patch1799') == 0)
      let g:my_addons_editorconfig_type = "vim-plug"
    else
      let g:my_addons_editorconfig_type = "packadd"
    endif
  endif

  if g:my_addons_editorconfig_type == "packadd"
    " 標準で入っている EditorConfig を有効にする。
    packadd! editorconfig
  elseif g:my_addons_editorconfig_type == "vim-plug"
    " EditorConfig plugin for Vim
    Plug 'editorconfig/editorconfig-vim'
  endif

  if getenv('DOTFILES_VIM_LSP') == 'y'
    " Async Language Server Protocol plugin for vim8 and neovim.
    Plug 'prabirshrestha/vim-lsp'

    " Auto configurations for Language Servers for vim-lsp.
    Plug 'mattn/vim-lsp-settings'
  endif

  " Vim script for text filtering and alignment
  " このプラグインは vim-markdown の動作のために必要です。
  Plug 'godlygeek/tabular', { 'for': ['md', 'text'] }

  " Syntax highlighting, matching rules and mappings for the original Markdown
  " and extensions.
  " Markdown の中の diff などをハイライトするために使う。
  Plug 'preservim/vim-markdown', { 'for': ['md', 'text'] }

  if getenv('DOTFILES_VIM_SONICTEMPLATE') == 'y'
    " Easy and high speed coding method
    Plug 'mattn/vim-sonictemplate'
  endif

  " Delete/change/add parentheses/quotes/XML-tags/much more with ease
  Plug 'tpope/vim-surround'

call plug#end()

" Plug と対応するファイルがあれば読む。
" 例: reireias/vim-cheatsheet の場合、 vim-cheatsheet.vim があれば読む。
" 例: cocopon/iceberg.vim の場合、 iceberg-vim.vim があれば読む。
" Plug は on や for など遅延で読み込まれることがあるが、条件は問わず読む。
" そうしないと、モジュールの読み込み時に期待した設定が反映されないため。
let script_path = expand('<sfile>')
let script_dir = fnamemodify(script_path, ':p:h')
let plugs_keys = keys(g:plugs)
for name_with_dot in plugs_keys
  let name = substitute(name_with_dot, '\.', '-', 'g')
  let name_vim_path = script_dir . '/' . name . '.vim'
  if filereadable(name_vim_path)
    exec "source " . fnameescape(name_vim_path)
  endif
endfor
