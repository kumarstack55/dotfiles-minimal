" vim:foldmethod=marker:

" スクリプトのエンコードが UTF-8 であることを示す。
scriptencoding utf-8

" {{{ 変数を定義する。

" EditorConfig の種類がなんであるか。
let g:my_addons_editorconfig_type = 0

" キーワードにハイフンを含めるかどうか。
let g:my_vimrc_iskeyword_contains_hyphen = 0

" }}}

" {{{ 関数を定義する。

" {{{ ハイフンをキーワードに含めるかどうかを切り替える。
function! MyVimrcToggleIsKeyword()
  if g:my_vimrc_iskeyword_contains_hyphen
    echo 'Hyphen is used as delimiter.'
    set iskeyword-=-
  else
    echo 'Hyphens NOT used as delimiters.'
    set iskeyword+=-
  endif
  let g:my_vimrc_iskeyword_contains_hyphen = (g:my_vimrc_iskeyword_contains_hyphen + 1) % 2
endfunction
" }}}

" {{{ タブ幅を設定する。
function! MyVimrcTabstopSet(ts)
  let &l:tabstop = a:ts
  let &l:shiftwidth = a:ts
  let &l:softtabstop = a:ts
  setlocal expandtab
endfunction
" }}}

" {{{ 構文ハイライトを、ファイルの先頭から解析する。
"
" 構文ハイライトで行数が多い Markdown などを編集すると解析に失敗する。
" 例えば、コードブロック内の # で始まる行を見出しとして解析してしまう。
" これを回避するため、ファイルの先頭から解析するようにする。
function! MyVimrcSyntaxSyncFromstart()
  syntax sync fromstart
endfunction
" }}}

" {{{ ファイルタイプが Markdown の設定をする。
function! MyVimrcFiletypeMarkdown(ts)
  setlocal filetype=markdown
  if ! g:my_addons_editorconfig_type
    call MyVimrcTabstopSet(a:ts)
  end
  " formatlistpat に合う箇条書きにインデントを設定する。
  let &l:breakindentopt = 'list:2'
  call MyVimrcSyntaxSyncFromstart()
endfunction
" }}}

" {{{ ファイルタイプが PowerShell の設定をする。
function! MyVimrcFiletypePowerShell()
  setlocal filetype=ps1
  call MyVimrcTabstopSet(4)
endfunction
" }}}

" {{{ カラースキームが存在するかどうかを返す。
function! MyVimrcTestColorschemeExists(name)
  return !empty(globpath(&rtp, 'colors/' . a:name . '.vim'))
endfunction
" }}}

" {{{ カラースキームを設定する。
function MyVimrcConfigureColorscheme(colorscheme_list)
  for c in a:colorscheme_list
    if MyVimrcTestColorschemeExists(c)
      if c == 'iceberg'
        set background=dark
      endif
      exec "colorscheme " . c
      break
    endif
  endfor
endfunction
" }}}

" {{{ ファイルの情報を表示する。
function! MyVimrcFileShowInfo()
  echo 'bomb: ' . &bomb
  echo 'fileencoding: ' . &fileencoding
  echo 'fileformat: ' . &fileformat
  echo 'absPath: ' . expand('%:p')
endfunction
" }}}

" }}}

" {{{ 設定する。

" {{{ 標準機能を設定する。

" 記号などをASCII文字の2倍幅として扱う。
set ambiwidth=double

" 起動時に `:intro` メッセージを表示しない。
set shortmess+=I

" すべてのイベントでベルを鳴らさない。
set belloff=all

" ウィンドウを <C-w>+<C-w>+ の代わりに <C-w>++ でサイズ変更する。
" https://zenn.dev/mattn/articles/83c2d4c7645faa
nmap <C-w>+ <C-w>+<SID>ws
nmap <C-w>- <C-w>-<SID>ws
nmap <C-w>> <C-w>><SID>ws
nmap <C-w>< <C-w><<SID>ws
nnoremap <script> <SID>ws+ <C-w>+<SID>ws
nnoremap <script> <SID>ws- <C-w>-<SID>ws
nnoremap <script> <SID>ws> <C-w>><SID>ws
nnoremap <script> <SID>ws< <C-w><<SID>ws
nmap <SID>ws <Nop>

" ファイル保存時に undo 履歴を保存しない。
set noundofile

" ファイル上書き前にバックアップを作らない。
set nobackup

" 同ファイルの複数編集に気づけるようスワップ・ファイルを作る。
set swapfile

" シンタックス・ハイライティングを有効にする。
syntax enable

" 指定カラムを強調表示する。
if exists('+colorcolumn')
  set colorcolumn=80
endif

" 数行がチェックされて set コマンドを実行する。
set modeline
set modelines=2

" 最後の編集位置にカーソルを移動する。
" より詳細は :help last-position-jump を参照してください。
autocmd BufReadPost *
  \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
  \ |   exe "normal! g`\""
  \ | endif

" カーソルがスクリーンの上端または下端にあるとき、直前または直後に指定の
" 行数を表示する。
set scrolloff=2

" 新しい行を編集するとき、現在の行のインデントをコピーする。
set autoindent

" 新しい行で、スマート・インデントを有効にする
" なお、スマート・インデントでは行頭の # はインデントしない。
" 例えば ps1 編集時に行頭にコメントがある行は `>>` でインデントされない。
set smartindent

" インデントするとき shiftwidth の整数倍にする。
set shiftround

" 折り返された行を同じインデントで表示する。
set breakindent

" タブ文字の代わりに、スペースを挿入する。
set expandtab

" 新しいバッファから編集したときに、ファイルタイプの設定を適用するコマンドを定義する。
command! MyFiletypeMarkdown call MyVimrcFiletypeMarkdown(4)
command! MyFiletypePs1 call MyVimrcFiletypePowerShell()

command! MyFtMarkdown MyFiletypeMarkdown
command! MyFtPs1 MyFiletypePs1

" キーワードにハイフンを含めるかどうかを切り替えるコマンドを定義する。
command! MyIsKeywordToggle call MyVimrcToggleIsKeyword()

" ファイルの情報を表示するコマンドを定義する。
command! MyFileShowInfo call MyVimrcFileShowInfo()

" }}}

" {{{ 環境固有の設定あれば読み込む。

" local.vim ファイルがあれば読む。
" このファイルは環境固有の設定が必要な場合のみ、存在させる。
let script_path = expand('<sfile>')
let script_dir = fnamemodify(script_path, ':p:h')
let local_vim_path = script_dir . '/local.vim'
if filereadable(local_vim_path)
  exec "source " . fnameescape(local_vim_path)
endif

" }}}

" {{{ addons 有効なら読み込む。

" addons/main.vim ファイルがあれば有効と判定する。
let addons_dir = script_dir . '/addons'
let addons_main_vim_path = addons_dir . '/main.vim'
if filereadable(addons_main_vim_path)
  exec "source " . fnameescape(addons_main_vim_path)
endif

" }}}

" {{{ プラグイン設定後に必要な設定をする。

" {{{ カラースキームを設定する。
" カラースキームのいくつかはプラグインに依存するため、
" addons/main.vim のあとに実行する。
let g:my_colorscheme_list = ["iceberg", "habamax", "pablo"]
if has('win32') && !has('gui_running')
  " Windows の PowerShell で vim 実行時、 iceberg を選択後に default になった。
  " そのため、 iceberg を除外する。
  let g:my_colorscheme_list = ["habamax", "pablo"]
endif
call MyVimrcConfigureColorscheme(g:my_colorscheme_list)
" }}}

" {{{ ファイル タイプごとに設定する。
" EditrConfig プラグインが読まれていない場合のみ実施するため、
" addons/main.vim のあとに実行する。
if g:my_addons_editorconfig_type
  " ファイル タイプごとに syntax sync を設定する。
  augroup fileTypeSyntaxSync
    autocmd!
    autocmd BufNewFile,BufRead *.md call MyVimrcSyntaxSyncFromstart()
  augroup END
else
  " ファイル タイプごとにインデントを設定する。
  augroup fileTypeIndent
    autocmd!
    autocmd BufNewFile,BufRead *.c,*.cpp,*.h call MyVimrcTabstopSet(4)
    autocmd BufNewFile,BufRead *.md call MyVimrcFiletypeMarkdown(4)
    autocmd BufNewFile,BufRead *.ps1 call MyVimrcFiletypePowerShell()
    autocmd BufNewFile,BufRead *.py call MyVimrcTabstopSet(4)
    autocmd BufNewFile,BufRead *.rst call MyVimrcTabstopSet(2)
    autocmd BufNewFile,BufRead *.sh,*.bash call MyVimrcTabstopSet(2)
    autocmd BufNewFile,BufRead *.txt call MyVimrcTabstopSet(4)
    autocmd BufNewFile,BufRead vimrc,_gvimrc,gvimrc,*.vim call MyVimrcTabstopSet(2)
    autocmd BufNewFile,BufRead *.yaml,*.yml call MyVimrcTabstopSet(2)
  augroup END
endif
" }}}

" }}}

" }}}
